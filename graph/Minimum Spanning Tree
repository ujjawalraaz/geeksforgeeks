{
#include <bits/stdc++.h>
using namespace std;
int spanningTree(int V,int E,vector<vector<int> > graph);
// Driver code
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int V,E;
        cin>>V>>E;
        vector< vector<int> > graph(V,vector<int>(V,INT_MAX));
        while(E--)
        {
            int u,v,w;
            cin>>u>>v>>w;
            u--,v--;
            graph[u][v] = w;
            graph[v][u] = w;
        }
        cout<<spanningTree(V,E,graph)<<endl;
    }
    return 0;
}

}
/*This is a function problem.You only need to complete the function given below*/
// Function to construct and print MST for
// a graph represented using adjacency
// matrix representation, with V vertices.
// graph[i][j] = weight if edge exits else INT_MAX
int pickElement(int n,int dist[],int visited[])  
{  
    // Initialize min value  
    int min = INT_MAX, min_index;  
  
    for (int v = 0; v < n; v++)  
        if (visited[v] == 0 && dist[v] < min)  
            min = dist[v], min_index = v;  
  
    return min_index;  
} 

int spanningTree(int n,int e,vector<vector<int> > v1)
{
    // code here
    int dist[n];
    for(int i=0;i<=n;i++)
    dist[i]=INT_MAX;
    dist[0]=0;
    int visited[n]={0};
    for(int i=0;i<n;i++)
    {
        int m=pickElement(n,dist,visited);
        visited[m]=1;
        for(int j=0;j<n;j++)
        {
            if(visited[j]==0&&v1[m][j]<100000&&dist[j]>v1[m][j])
            {
                dist[j]=v1[m][j];      
            }
        }
    }
    int sum=0;
    for(int i=0;i<n;i++)
    sum=sum+dist[i];
    return(sum);
}
